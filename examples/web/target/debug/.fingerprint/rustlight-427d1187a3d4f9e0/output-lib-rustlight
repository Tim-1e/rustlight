{"message":"unused import: `crate::bsdfs::phong::BSDFPhong`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":6267,"byte_end":6297,"line_start":214,"line_end":214,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"use crate::bsdfs::phong::BSDFPhong;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":6263,"byte_end":6298,"line_start":214,"line_end":214,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"use crate::bsdfs::phong::BSDFPhong;","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `crate::bsdfs::phong::BSDFPhong`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0me:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs:214:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::bsdfs::phong::BSDFPhong;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"conflicting implementations of trait `Clone` for type `bsdfs::BSDFEvent`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":4181,"byte_end":4186,"line_start":140,"line_end":140,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    #[derive(Clone)]","highlight_start":14,"highlight_end":19}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":4181,"byte_end":4186,"line_start":140,"line_end":140,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    #[derive(Clone)]","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","byte_start":4851,"byte_end":4866,"line_start":144,"line_end":144,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11421,"byte_end":11426,"line_start":363,"line_end":363,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":39,"highlight_end":44}],"label":"conflicting implementation for `bsdfs::BSDFEvent`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11421,"byte_end":11426,"line_start":363,"line_end":363,"column_start":39,"column_end":44,"is_primary":false,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":4155,"byte_end":4322,"line_start":139,"line_end":145,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"bitflags! {","highlight_start":1,"highlight_end":12},{"text":"    #[derive(Clone)]","highlight_start":1,"highlight_end":21},{"text":"    pub struct BSDFEvent: u8 {","highlight_start":1,"highlight_end":31},{"text":"        const REFLECTION       = 0b00000001;","highlight_start":1,"highlight_end":45},{"text":"        const TRANSMISSION     = 0b00000010;","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bitflags!","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11087,"byte_end":11108,"line_start":350,"line_end":350,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitflags {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","byte_start":4851,"byte_end":4866,"line_start":144,"line_end":144,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `Clone` for type `bsdfs::BSDFEvent`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0me:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs:139:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mbitflags! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(Clone)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct BSDFEvent: u8 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const REFLECTION       = 0b00000001;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const TRANSMISSION     = 0b00000010;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `bsdfs::BSDFEvent`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"conflicting implementations of trait `Clone` for type `bsdfs::BSDFType`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":4352,"byte_end":4357,"line_start":148,"line_end":148,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    #[derive(Clone)]","highlight_start":14,"highlight_end":19}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":4352,"byte_end":4357,"line_start":148,"line_end":148,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    #[derive(Clone)]","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","byte_start":4851,"byte_end":4866,"line_start":144,"line_end":144,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11421,"byte_end":11426,"line_start":363,"line_end":363,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":39,"highlight_end":44}],"label":"conflicting implementation for `bsdfs::BSDFType`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11421,"byte_end":11426,"line_start":363,"line_end":363,"column_start":39,"column_end":44,"is_primary":false,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs","byte_start":4326,"byte_end":4588,"line_start":147,"line_end":155,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"bitflags! {","highlight_start":1,"highlight_end":12},{"text":"    #[derive(Clone)]","highlight_start":1,"highlight_end":21},{"text":"    pub struct BSDFType: u8 {","highlight_start":1,"highlight_end":30},{"text":"        const NULL              = 0b00000001;","highlight_start":1,"highlight_end":46},{"text":"        const DIFFUSE           = 0b00000010;","highlight_start":1,"highlight_end":46},{"text":"        const GLOSSY            = 0b00000100;","highlight_start":1,"highlight_end":46},{"text":"        const DELTA             = 0b00001000;","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bitflags!","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11087,"byte_end":11108,"line_start":350,"line_end":350,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitflags {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","byte_start":4851,"byte_end":4866,"line_start":144,"line_end":144,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `Clone` for type `bsdfs::BSDFType`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0me:\\RustProject\\rustlight\\src\\bsdfs\\mod.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mbitflags! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(Clone)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct BSDFType: u8 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const NULL              = 0b00000001;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `bsdfs::BSDFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"conflicting implementations of trait `StructuralPartialEq` for type `Strategies`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"e:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs","byte_start":38588,"byte_end":38597,"line_start":1146,"line_end":1146,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"    #[derive(PartialEq)]","highlight_start":14,"highlight_end":23}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs","byte_start":38588,"byte_end":38597,"line_start":1146,"line_end":1146,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"    #[derive(PartialEq)]","highlight_start":14,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\cmp.rs","byte_start":7905,"byte_end":7924,"line_start":239,"line_end":239,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11406,"byte_end":11415,"line_start":363,"line_end":363,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":24,"highlight_end":33}],"label":"conflicting implementation for `Strategies`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11406,"byte_end":11415,"line_start":363,"line_end":363,"column_start":24,"column_end":33,"is_primary":false,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs","byte_start":38451,"byte_end":39573,"line_start":1143,"line_end":1163,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"bitflags! {","highlight_start":1,"highlight_end":12},{"text":"    /// This structure store the rendering options","highlight_start":1,"highlight_end":51},{"text":"    /// That the user have given through the command line","highlight_start":1,"highlight_end":58},{"text":"    #[derive(PartialEq)]","highlight_start":1,"highlight_end":25},{"text":"    pub struct Strategies: u16 {","highlight_start":1,"highlight_end":33},{"text":"        // Distance sampling","highlight_start":1,"highlight_end":29},{"text":"        const TR                  = 0b000000001;  // Transmittance distance sampling","highlight_start":1,"highlight_end":85},{"text":"        const EQUIANGULAR         = 0b000000010;  // Equi-angular distance sampling","highlight_start":1,"highlight_end":84},{"text":"        const EQUIANGULAR_CLAMPED = 0b000000100;  // Equi-angular with cos clamped","highlight_start":1,"highlight_end":83},{"text":"        const POINT_NORMAL        = 0b000001000;  // PN sampling","highlight_start":1,"highlight_end":65},{"text":"        // Flavors","highlight_start":1,"highlight_end":19},{"text":"        const TAYLOR_PHASE  = 0b000000010000; // Phase function","highlight_start":1,"highlight_end":64},{"text":"        const TAYLOR_TR     = 0b000000100000; // Tr (all distance)","highlight_start":1,"highlight_end":67},{"text":"        const WRAP        = 0b000010000000; // Warp approach","highlight_start":1,"highlight_end":61},{"text":"        const BEST        = 0b000100000000; // \"Best sampling technique\" (Bezier and Taylor)","highlight_start":1,"highlight_end":93},{"text":"                                            // Should be changed depending of the scene configuration","highlight_start":1,"highlight_end":102},{"text":"        // Point sampling","highlight_start":1,"highlight_end":26},{"text":"        const EX          = 0b010000000000;  // Explicit sampling","highlight_start":1,"highlight_end":66},{"text":"        const PHASE       = 0b100000000000;  // Phase function sampling","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bitflags!","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11087,"byte_end":11108,"line_start":350,"line_end":350,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitflags {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\cmp.rs","byte_start":7905,"byte_end":7924,"line_start":239,"line_end":239,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `StructuralPartialEq` for type `Strategies`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0me:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs:1143:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mbitflags! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// This structure store the rendering options\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// That the user have given through the command line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(PartialEq)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `Strategies`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialEq` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"conflicting implementations of trait `PartialEq` for type `Strategies`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"e:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs","byte_start":38588,"byte_end":38597,"line_start":1146,"line_end":1146,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"    #[derive(PartialEq)]","highlight_start":14,"highlight_end":23}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs","byte_start":38588,"byte_end":38597,"line_start":1146,"line_end":1146,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"    #[derive(PartialEq)]","highlight_start":14,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\cmp.rs","byte_start":7905,"byte_end":7924,"line_start":239,"line_end":239,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11406,"byte_end":11415,"line_start":363,"line_end":363,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":24,"highlight_end":33}],"label":"conflicting implementation for `Strategies`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11406,"byte_end":11415,"line_start":363,"line_end":363,"column_start":24,"column_end":33,"is_primary":false,"text":[{"text":"        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"e:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs","byte_start":38451,"byte_end":39573,"line_start":1143,"line_end":1163,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"bitflags! {","highlight_start":1,"highlight_end":12},{"text":"    /// This structure store the rendering options","highlight_start":1,"highlight_end":51},{"text":"    /// That the user have given through the command line","highlight_start":1,"highlight_end":58},{"text":"    #[derive(PartialEq)]","highlight_start":1,"highlight_end":25},{"text":"    pub struct Strategies: u16 {","highlight_start":1,"highlight_end":33},{"text":"        // Distance sampling","highlight_start":1,"highlight_end":29},{"text":"        const TR                  = 0b000000001;  // Transmittance distance sampling","highlight_start":1,"highlight_end":85},{"text":"        const EQUIANGULAR         = 0b000000010;  // Equi-angular distance sampling","highlight_start":1,"highlight_end":84},{"text":"        const EQUIANGULAR_CLAMPED = 0b000000100;  // Equi-angular with cos clamped","highlight_start":1,"highlight_end":83},{"text":"        const POINT_NORMAL        = 0b000001000;  // PN sampling","highlight_start":1,"highlight_end":65},{"text":"        // Flavors","highlight_start":1,"highlight_end":19},{"text":"        const TAYLOR_PHASE  = 0b000000010000; // Phase function","highlight_start":1,"highlight_end":64},{"text":"        const TAYLOR_TR     = 0b000000100000; // Tr (all distance)","highlight_start":1,"highlight_end":67},{"text":"        const WRAP        = 0b000010000000; // Warp approach","highlight_start":1,"highlight_end":61},{"text":"        const BEST        = 0b000100000000; // \"Best sampling technique\" (Bezier and Taylor)","highlight_start":1,"highlight_end":93},{"text":"                                            // Should be changed depending of the scene configuration","highlight_start":1,"highlight_end":102},{"text":"        // Point sampling","highlight_start":1,"highlight_end":26},{"text":"        const EX          = 0b010000000000;  // Explicit sampling","highlight_start":1,"highlight_end":66},{"text":"        const PHASE       = 0b100000000000;  // Phase function sampling","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bitflags!","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","byte_start":11087,"byte_end":11108,"line_start":350,"line_end":350,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitflags {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"C:\\Users\\xy_zm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\cmp.rs","byte_start":7905,"byte_end":7924,"line_start":239,"line_end":239,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `PartialEq` for type `Strategies`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0me:\\RustProject\\rustlight\\src\\integrators\\explicit\\point_normal.rs:1143:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mbitflags! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// This structure store the rendering options\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// That the user have given through the command line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(PartialEq)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `Strategies`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialEq` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0119`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0119`.\u001b[0m\n"}
